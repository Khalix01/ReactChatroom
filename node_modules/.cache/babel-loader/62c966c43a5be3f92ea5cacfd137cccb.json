{"ast":null,"code":"var _jsxFileName = \"/home/khalix/Documents/ReactChatroom/client-side/src/components/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport Infobar from './InfoBar.js';\nimport Input from './Input.js';\nimport Messages from './Messages.js';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const SERVER = 'https://react-chatroom-server.herokuapp.com/';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(SERVER);\n    setName(name);\n    setRoom(room); //console.log(name,room);\n\n    socket.emit('join', {\n      name: name,\n      room: room\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [SERVER, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      console.log('here');\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Infobar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/khalix/Documents/ReactChatroom/client-side/src/components/Chat.js"],"names":["React","useState","useEffect","queryString","io","Infobar","Input","Messages","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","SERVER","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React , { useState, useEffect }from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport Infobar from './InfoBar.js'\nimport Input from './Input.js'\nimport Messages from './Messages.js'\n\nlet socket;\n\nconst Chat = ({location}) => {\n\tconst [name, setName] = useState('');\n\tconst [room, setRoom] = useState('');\n\tconst [users, setUsers] = useState('');\n\tconst [message, setMessage] = useState('');\n\tconst [messages, setMessages] = useState([]);\n\tconst SERVER = 'https://react-chatroom-server.herokuapp.com/'\n\tuseEffect (() => {\n\t\tconst { name, room } = queryString.parse(location.search);\n\n\t\tsocket=io(SERVER);\n\n\t\tsetName(name);\n\t\tsetRoom(room);\n\t\t//console.log(name,room);\n\t\tsocket.emit('join',{name:name,room:room},() => { });\n\n\t\treturn () => {\n\t\t\tsocket.emit('disconnect');\n\t\t\tsocket.off();\n\t\t}\n\t},[SERVER,location.search]);\n\n\tuseEffect(() => {\n\t\tsocket.on('message',(message)=>{\n\t\t\tsetMessages([...messages,message]);\n\t\t});\n\n\t\tsocket.on(\"roomData\", ({ users }) => {\n\t\t\tsetUsers(users);\n\t\t});\n\n\t}, []);\n\n\tconst sendMessage = (event) => {\n\t\tevent.preventDefault();\n\n\t\tif(message) {\n\t\t\tconsole.log('here')\n\t\t\tsocket.emit('sendMessage', message, () => setMessage(''));\n\t\t}\n\t}\n\n\tconsole.log(message,messages);\n\n\treturn(\n\t\t<div className=\"outerContainer\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<Infobar room={room}/>\n\t\t\t\t<Messages messages={messages} name={name} />\n\t\t\t\t<Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nexport default Chat "]},"metadata":{},"sourceType":"module"}